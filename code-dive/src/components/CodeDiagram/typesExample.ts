import { ParsedTypes } from "../../codeModel/ParsedTypes";
import { IType } from "../../codeModel/Types/IType";
import { Class } from "../../codeModel/Types/Class";
import { Struct } from "../../codeModel/Types/Struct";
import { Interface } from "../../codeModel/Types/Interface";
import { Enum } from "../../codeModel/Types/Enum";

var parsedTypes: any = {"classes":[{"constructors":[],"fields":[],"methods":[{"declaredVariables":[{"name":"x","type":"int"},{"name":"y","type":"int"}],"modifiers":["static"],"name":"Main","parameters":[{"modifier":"","name":"args","type":"string[]"}],"statements":[{"statementText":"int x;","usedConstructors":[],"usedFieldsAndProperties":[],"usedMethods":[],"usedTypes":["int"]},{"statementText":"int y;","usedConstructors":[],"usedFieldsAndProperties":[],"usedMethods":[],"usedTypes":["int"]},{"statementText":"y = 22;","usedConstructors":[],"usedFieldsAndProperties":["y"],"usedMethods":[],"usedTypes":[]},{"statementText":"x = 24 + y;","usedConstructors":[],"usedFieldsAndProperties":["x","y"],"usedMethods":[],"usedTypes":[]},{"statementText":"Console.WriteLine(\"All good here\");","usedConstructors":[],"usedFieldsAndProperties":[],"usedMethods":["Console.WriteLine"],"usedTypes":[]}],"type":"void"}],"modifiers":[],"name":"Program","namespace":"FruitDelivery","namespaceDependecies":["System","System.Collections.Generic","System.Linq","System.Text","System.Threading.Tasks"],"parentInheritances":[],"properties":[]},{"constructors":[{"declaredVariables":[],"modifiers":[],"name":"MagicTrick","parameters":[{"modifier":"","name":"name","type":"string"}],"statements":[{"statementText":"Name = name;","usedConstructors":[],"usedFieldsAndProperties":["Name","name"],"usedMethods":[],"usedTypes":[]}]}],"fields":[{"modifiers":["private"],"name":"secret","type":"string"}],"methods":[{"declaredVariables":[{"name":"math","type":"Math"}],"modifiers":["public"],"name":"ApplyMagic","parameters":[{"modifier":"","name":"x","type":"int"}],"statements":[{"statementText":"Math math;","usedConstructors":[],"usedFieldsAndProperties":[],"usedMethods":[],"usedTypes":["Math"]},{"statementText":"math = new Math();","usedConstructors":["Math"],"usedFieldsAndProperties":["math"],"usedMethods":[],"usedTypes":[]},{"statementText":"return x * math.MagicNumber;","usedConstructors":[],"usedFieldsAndProperties":["x","math.MagicNumber"],"usedMethods":[],"usedTypes":[]}],"type":"int"}],"modifiers":["public"],"name":"MagicTrick","namespace":"FruitDelivery","namespaceDependecies":["System","System.Collections.Generic","System.Linq","System.Text","System.Threading.Tasks"],"parentInheritances":["Math"],"properties":[{"accessors":[{"body":[],"declaredVariables":[],"type":"get"},{"body":[],"declaredVariables":[],"type":"set"}],"modifiers":["public"],"name":"Name","type":"string"}]},{"constructors":[],"fields":[],"methods":[{"declaredVariables":[{"name":"sum","type":"int"}],"modifiers":["public"],"name":"Add","parameters":[{"modifier":"","name":"x","type":"int"},{"modifier":"","name":"y","type":"int"}],"statements":[{"statementText":"int sum;","usedConstructors":[],"usedFieldsAndProperties":[],"usedMethods":[],"usedTypes":["int"]},{"statementText":"sum = x + y;","usedConstructors":[],"usedFieldsAndProperties":["sum","x","y"],"usedMethods":[],"usedTypes":[]},{"statementText":"return sum;","usedConstructors":[],"usedFieldsAndProperties":["sum"],"usedMethods":[],"usedTypes":[]}],"type":"int"},{"declaredVariables":[],"modifiers":["public"],"name":"Multiply","parameters":[{"modifier":"","name":"x","type":"int"},{"modifier":"","name":"y","type":"int"}],"statements":[{"statementText":"return x * y;","usedConstructors":[],"usedFieldsAndProperties":["x","y"],"usedMethods":[],"usedTypes":[]}],"type":"int"}],"modifiers":["public"],"name":"Math","namespace":"FruitDelivery","namespaceDependecies":["System","System.Collections.Generic","System.Linq","System.Text","System.Threading.Tasks"],"parentInheritances":[],"properties":[{"accessors":[{"body":[],"declaredVariables":[],"type":"get"},{"body":[],"declaredVariables":[],"type":"set"}],"modifiers":["public"],"name":"MagicNumber","type":"int"}]}],"enums":[{"modifiers":[],"name":"Salutes","namespace":"FruitDelivery","namespaceDependecies":["System","System.Collections.Generic","System.Linq","System.Text","System.Threading.Tasks"],"parentInheritances":[],"values":["HiFive","AllGood"]}],"interfaces":[{"methods":[{"declaredVariables":[],"modifiers":[],"name":"AwesomeFact","parameters":[],"statements":[],"type":"void"}],"modifiers":[],"name":"IKnowAll","namespace":"FruitDelivery","namespaceDependecies":["System","System.Collections.Generic","System.Linq","System.Text","System.Threading.Tasks"],"parentInheritances":[],"properties":[{"accessors":[{"body":[],"declaredVariables":[],"type":"get"},{"body":[],"declaredVariables":[],"type":"set"}],"modifiers":[],"name":"Knowledge","type":"int"}]}],"structs":[{"constructors":[],"fields":[],"methods":[{"declaredVariables":[{"name":"salute","type":"Salutes"}],"modifiers":["public"],"name":"Add","parameters":[{"modifier":"","name":"x","type":"int"},{"modifier":"","name":"y","type":"int"}],"statements":[{"statementText":"Salutes salute;","usedConstructors":[],"usedFieldsAndProperties":[],"usedMethods":[],"usedTypes":["Salutes"]},{"statementText":"salute = Salutes.HiFive;","usedConstructors":[],"usedFieldsAndProperties":["salute","Salutes.HiFive"],"usedMethods":[],"usedTypes":[]},{"statementText":"return x + y;","usedConstructors":[],"usedFieldsAndProperties":["x","y"],"usedMethods":[],"usedTypes":[]}],"type":"Math"}],"modifiers":[],"name":"MyStruct","namespace":"FruitDelivery","namespaceDependecies":["System","System.Collections.Generic","System.Linq","System.Text","System.Threading.Tasks"],"parentInheritances":[],"properties":[{"accessors":[{"body":[],"declaredVariables":[],"type":"get"},{"body":[],"declaredVariables":[],"type":"set"}],"modifiers":["public"],"name":"X","type":"int"}]}]}
export const types: IType[] = (parsedTypes as ParsedTypes).classes.map(type => new Class(type) as IType)
    .concat((parsedTypes as ParsedTypes).structs.map(type => new Struct(type)))
    .concat((parsedTypes as ParsedTypes).interfaces.map(type => new Interface(type)))
    .concat((parsedTypes as ParsedTypes).enums.map(type => new Enum(type)));