import { ParsedTypes } from "../../codeModel/ParsedTypes";
import { IType } from "../../codeModel/Types/IType";
import { Class } from "../../codeModel/Types/Class";
import { Struct } from "../../codeModel/Types/Struct";
import { Interface } from "../../codeModel/Types/Interface";
import { Enum } from "../../codeModel/Types/Enum";

var parsedTypes: any = { classes:
  [ { namespaceDependecies: [ 'System', 'System.Collections' ],
      namespace: 'DoFactory.GangOfFour.Iterator.Structural',   
      name: 'MainApp',
      modifiers: [],
      parentInheritances: [],
      fields: [],
      properties: [],
      constructors: [],
      methods:
       [ { index: 0,
           type: 'void',
           name: 'Main',
           modifiers: [ 'static' ],
           parameters: [],
           declaredVariables:
            [ { type: 'ConcreteAggregate', name: 'a' },
              { type: 'Iterator', name: 'i' },
              { type: 'object', name: 'item' } ],
           statements:
            [ { index: 0,
                statementText: 'ConcreteAggregate a;',
                usedFieldsAndProperties: [],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [ 'ConcreteAggregate' ] },
              { index: 1,
                statementText: 'a = new ConcreteAggregate();',
                usedFieldsAndProperties: [ 'a' ],
                usedConstructors: [ 'ConcreteAggregate' ],
                usedMethods: [],
                usedTypes: [] },
              { index: 2,
                statementText: 'a[0] = "Item A";',
                usedFieldsAndProperties: [ 'a' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] },
              { index: 3,
                statementText: 'a[1] = "Item B";',
                usedFieldsAndProperties: [ 'a' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] },
              { index: 4,
                statementText: 'a[2] = "Item C";',
                usedFieldsAndProperties: [ 'a' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] },
              { index: 5,
                statementText: 'a[3] = "Item D";',
                usedFieldsAndProperties: [ 'a' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] },
              { index: 6,
                statementText: 'Iterator i;',
                usedFieldsAndProperties: [],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [ 'Iterator' ] },
              { index: 7,
                statementText: 'i = a.CreateIterator();',
                usedFieldsAndProperties: [ 'i' ],
                usedConstructors: [],
                usedMethods: [ 'a.CreateIterator' ],
                usedTypes: [] },
              { index: 8,
                statementText: 'Console.WriteLine("Iterating over collection:");',
                usedFieldsAndProperties: [],
                usedConstructors: [],
                usedMethods: [ 'Console.WriteLine' ],
                usedTypes: [] },
              { index: 9,
                statementText: 'object item;',
                usedFieldsAndProperties: [],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [ 'object' ] },
              { index: 10,
                statementText: 'item = i.First();',
                usedFieldsAndProperties: [ 'item' ],
                usedConstructors: [],
                usedMethods: [ 'i.First' ],
                usedTypes: [] },
              { index: 11,
                statementText: 'while(item != null) item = i.Next();',
                usedFieldsAndProperties: [ 'item', 'item' ],
                usedConstructors: [],
                usedMethods: [ 'i.Next' ],
                usedTypes: [] },
              { index: 12,
                statementText: 'Console.ReadKey();',
                usedFieldsAndProperties: [],
                usedConstructors: [],
                usedMethods: [ 'Console.ReadKey' ],
                usedTypes: [] } ] } ] },
    { namespaceDependecies: [ 'System', 'System.Collections' ],
      namespace: 'DoFactory.GangOfFour.Iterator.Structural',
      name: 'Aggregate',
      modifiers: [ 'abstract' ],
      parentInheritances: [],
      fields: [],
      properties: [],
      constructors: [],
      methods:
       [ { index: 0,
           type: 'Iterator',
           name: 'CreateIterator',
           modifiers: [ 'public', 'abstract' ],
           parameters: [],
           declaredVariables: [],
           statements: [] } ] },
    { namespaceDependecies: [ 'System', 'System.Collections' ],
      namespace: 'DoFactory.GangOfFour.Iterator.Structural',
      name: 'ConcreteAggregate',
      modifiers: [],
      parentInheritances: [ 'Aggregate' ],
      fields: [ { index: 0, type: 'ArrayList', name: '_items', modifiers: [ 'private' ] } ],
      properties:
       [ { index: 0,
           type: 'int',
           name: 'Count',
           modifiers: [ 'public' ],
           parameters: [],
           accessors:
            [ { index: 0,
                name: 'get',
                declaredVariables: [],
                body:
                 [ { index: 0,
                     statementText: 'return _items.Count;',
                     usedFieldsAndProperties: [ '_items.Count' ],
                     usedConstructors: [],
                     usedMethods: [],
                     usedTypes: [] } ] } ] },
         { index: 1,
           type: 'object',
           name: 'this',
           modifiers: [],
           parameters: [ { index: 0, type: 'int', name: 'index', modifier: '' } ],
           accessors:
            [ { index: 0,
                name: 'get',
                declaredVariables: [],
                body:
                 [ { index: 0,
                     statementText: 'return _items[index];',
                     usedFieldsAndProperties: [ 'index', '_items' ],
                     usedConstructors: [],
                     usedMethods: [],
                     usedTypes: [] } ] },
              { index: 1,
                name: 'set',
                declaredVariables: [],
                body:
                 [ { index: 0,
                     statementText: '_items.Insert(index, value);',
                     usedFieldsAndProperties: [ 'index', 'value' ],
                     usedConstructors: [],
                     usedMethods: [ '_items.Insert' ],
                     usedTypes: [] } ] } ] } ],
      constructors: [],
      methods:
       [ { index: 0,
           type: 'Iterator',
           name: 'CreateIterator',
           modifiers: [ 'public', 'override' ],
           parameters: [],
           declaredVariables: [],
           statements:
            [ { index: 0,
                statementText: '_items = new ArrayList();',
                usedFieldsAndProperties: [ '_items' ],
                usedConstructors: [ 'ArrayList' ],
                usedMethods: [],
                usedTypes: [] },
              { index: 1,
                statementText: 'return new ConcreteIterator(this);',
                usedFieldsAndProperties: [ 'this' ],
                usedConstructors: [ 'ConcreteIterator' ],
                usedMethods: [],
                usedTypes: [] } ] } ] },
    { namespaceDependecies: [ 'System', 'System.Collections' ],
      namespace: 'DoFactory.GangOfFour.Iterator.Structural',
      name: 'Iterator',
      modifiers: [ 'abstract' ],
      parentInheritances: [],
      fields: [],
      properties: [],
      constructors: [],
      methods:
       [ { index: 0,
           type: 'object',
           name: 'First',
           modifiers: [ 'public', 'abstract' ],
           parameters: [],
           declaredVariables: [],
           statements: [] },
         { index: 1,
           type: 'object',
           name: 'Next',
           modifiers: [ 'public', 'abstract' ],
           parameters: [],
           declaredVariables: [],
           statements: [] },
         { index: 2,
           type: 'bool',
           name: 'IsDone',
           modifiers: [ 'public', 'abstract' ],
           parameters: [],
           declaredVariables: [],
           statements: [] },
         { index: 3,
           type: 'object',
           name: 'CurrentItem',
           modifiers: [ 'public', 'abstract' ],
           parameters: [],
           declaredVariables: [],
           statements: [] } ] },
    { namespaceDependecies: [ 'System', 'System.Collections' ],
      namespace: 'DoFactory.GangOfFour.Iterator.Structural',
      name: 'ConcreteIterator',
      modifiers: [],
      parentInheritances: [ 'Iterator' ],
      fields:
       [ { index: 0, type: 'ConcreteAggregate', name: '_aggregate', modifiers: [ 'private' ] },
         { index: 1, type: 'int', name: '_current', modifiers: [ 'private' ] } ],
      properties: [],
      constructors:
       [ { index: 0,
           name: 'ConcreteIterator',
           modifiers: [ 'public' ],
           parameters: [ { index: 0, type: 'ConcreteAggregate', name: 'aggregate', modifier: '' } ],
           declaredVariables: [],
           statements:
            [ { index: 0,
                statementText: '_current = 0;',
                usedFieldsAndProperties: [ '_current' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] },
              { index: 1,
                statementText: 'this._aggregate = aggregate;',
                usedFieldsAndProperties: [ 'this._aggregate', 'aggregate' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] } ] } ],
      methods:
       [ { index: 0,
           type: 'object',
           name: 'First',
           modifiers: [ 'public', 'override' ],
           parameters: [],
           declaredVariables: [],
           statements:
            [ { index: 0,
                statementText: 'return _aggregate[0];',
                usedFieldsAndProperties: [ '_aggregate' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] } ] },
         { index: 1,
           type: 'object',
           name: 'Next',
           modifiers: [ 'public', 'override' ],
           parameters: [],
           declaredVariables: [ { type: 'object', name: 'ret' } ],
           statements:
            [ { index: 0,
                statementText: 'object ret;',
                usedFieldsAndProperties: [],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [ 'object' ] },
              { index: 1,
                statementText: 'ret = null;',
                usedFieldsAndProperties: [ 'ret' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] },
              { index: 2,
                statementText: 'if(_current < _aggregate.Count - 1) ret = MoveToNextItem();',
                usedFieldsAndProperties: [ '_current', '_aggregate.Count', 'ret' ],
                usedConstructors: [],
                usedMethods: [ 'MoveToNextItem' ],
                usedTypes: [] },
              { index: 3,
                statementText: 'return ret;',
                usedFieldsAndProperties: [ 'ret' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] } ] },
         { index: 2,
           type: 'object',
           name: 'MoveToNextItem',
           modifiers: [ 'private' ],
           parameters: [],
           declaredVariables: [],
           statements:
            [ { index: 0,
                statementText: '_current = _current + 1;',
                usedFieldsAndProperties: [ '_current', '_current' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] },
              { index: 1,
                statementText: 'return _aggregate[_current];',
                usedFieldsAndProperties: [ '_current', '_aggregate' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] } ] },
         { index: 3,
           type: 'object',
           name: 'CurrentItem',
           modifiers: [ 'public', 'override' ],
           parameters: [],
           declaredVariables: [],
           statements:
            [ { index: 0,
                statementText: 'return _aggregate[_current];',
                usedFieldsAndProperties: [ '_current', '_aggregate' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] } ] },
         { index: 4,
           type: 'bool',
           name: 'IsDone',
           modifiers: [ 'public', 'override' ],
           parameters: [],
           declaredVariables: [],
           statements:
            [ { index: 0,
                statementText: 'return _current >= _aggregate.Count;',
                usedFieldsAndProperties: [ '_current', '_aggregate.Count' ],
                usedConstructors: [],
                usedMethods: [],
                usedTypes: [] } ] } ] } ],
 structs: [],
 interfaces: [],
 enums:
  [ { namespaceDependecies: [ 'System', 'System.Collections' ],
      namespace: 'DoFactory.GangOfFour.Iterator.Structural',
      name: 'State',
      modifiers: [ 'public' ],
      parentInheritances: [],
      values:
       [ { index: 0, name: 'Empty' },
         { index: 1, name: 'Half' },
         { index: 2, name: 'Full' } ] } ] }
export const types: IType[] = (parsedTypes as ParsedTypes).classes.map(type => new Class(type) as IType)
    .concat((parsedTypes as ParsedTypes).structs.map(type => new Struct(type)))
    .concat((parsedTypes as ParsedTypes).interfaces.map(type => new Interface(type)))
    .concat((parsedTypes as ParsedTypes).enums.map(type => new Enum(type)));